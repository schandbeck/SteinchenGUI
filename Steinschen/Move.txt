package com.steinschen.main;

import java.awt.Graphics;

public class Move {

	private Game game;
	private Board board;
	private Handler handler;
	
	private int selX, selY;
	private int selX2, selY2;
	
	private int nextX, nextY;
	private int nextX2, nextY2;
	
	private int fieldSide;
	
	private int moves;
	
	Graphics g;

	public Move(Game game, Board board, Handler handler){
	
		this.game=game;
		this.board=board;
		this.handler=handler;
	}
	
	public void makeMove(int selFieldSide, int nextFieldSide, int selX, int selY, int nextX, int nextY) {
		
		int lastX=selX, lastY=selY;
		int direction=1;
		boolean moving=true;
		
		moves=board.getAmount(selY, selX, selFieldSide);
		System.out.println(" | " + moves);
		
		while(moving) {
		
			if(checkMove(selFieldSide, nextFieldSide, selX, selY, nextX, nextY)) {
				
				
				
				if(nextX>lastX) {
					direction=1;
				}
				if(nextX<lastX) {
					direction=-1;
				}
				
				lastX=nextX;
				nextX=lastX+(1*direction);
			
				
				if(nextX==-1 && selX==0 && nextY==0 && selY==1) {
					nextX=1;
					nextY=0;
				}
				else if(nextX==-1 && lastX==0 && nextY==1 && lastY==0) {
					
				}
				
				else if(nextX==0 && lastX==0 && nextY==1 && lastY==0) {
					nextX=0;
					nextY=1;
				}
				else if(nextX==0 && lastX==0 && nextY==0 && lastY==1) {
					nextX=0;
					nextY=0;
				}
				else if(nextX==7 && lastX==7 && nextY==1 && lastY==0) {
					nextX=7;
					nextY=1;
					direction=-1;
				}
				else if(nextX==7 && lastX==7 && nextY==0 && lastY==1) {
					nextX=7;
					nextY=0;
					direction=-1;
				}
				
				
				
				System.out.println(nextX);
				System.out.println(nextY);
				
				board.setAmount(selY, selX, selFieldSide, 2);
				
				
			}
			
			moving=false;
			System.out.println("Move succesful");
			handler.clearAll();
		}
		
	}
	
	
	public boolean checkMove(int selFieldSide, int nextFieldSide, int selX, int selY, int nextX, int nextY) {
		
		boolean moveLegal=false;
		
		if(board.getAmount(selY, selX, selFieldSide)>1) {
		
			if(selFieldSide==nextFieldSide && selFieldSide>0 && nextFieldSide>0) {
				
				if(((nextX==selX+1 || nextX==selX-1) && selY==nextY)) {
					moveLegal=true;
				}
	
				if((((selX==0 && nextX==0) || (selX==7 && nextX==7)) && (selX == nextX)) && ((nextY==0 && selY > nextY) || (nextY==1 && nextY > selY))) {
					moveLegal=true;
				}
			}
			
		}
		
		
		System.out.println(" | " + moveLegal);
		return moveLegal;
	}
	
	
	

	public int getSelX() {
		return selX;
	}

	public void setSelX(int selX) {
		this.selX = selX;
	}

	public int getSelY() {
		return selY;
	}

	public void setSelY(int selY) {
		this.selY = selY;
	}
	
	public int getSelX2() {
		return selX2;
	}

	public void setSelX2(int selX2) {
		this.selX2 = selX2;
	}

	public int getSelY2() {
		return selY2;
	}

	public void setSelY2(int selY2) {
		this.selY2 = selY2;
	}
	
	public int getFieldSide() {
		return fieldSide;
	}

	public void setFieldSide(int fieldSide) {
		this.fieldSide = fieldSide;
	}
	
	public int getNextX() {
		return nextX;
	}
	
	public void setNextX(int nextX) {
		this.nextX = nextX;
	}

	public int getNextY() {
		return nextY;
	}

	public void setNextY(int nextY) {
		this.nextY = nextY;
	}

	public int getNextX2() {
		return nextX2;
	}

	public void setNextX2(int nextX2) {
		this.nextX2 = nextX2;
	}

	public int getNextY2() {
		return nextY2;
	}

	public void setNextY2(int nextY2) {
		this.nextY2 = nextY2;
	}
}
